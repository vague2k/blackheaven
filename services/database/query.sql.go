// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"
)

const deleteInquiry = `-- name: DeleteInquiry :execrows
DELETE FROM inquiries
WHERE id = ?
`

func (q *Queries) DeleteInquiry(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteInquiry, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const selectInquiries = `-- name: SelectInquiries :many
;

SELECT id, topic, email, name, order_number, subject, content, created_at FROM inquiries
LIMIT ?
`

func (q *Queries) SelectInquiries(ctx context.Context, limit int64) ([]Inquiry, error) {
	rows, err := q.db.QueryContext(ctx, selectInquiries, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Inquiry
	for rows.Next() {
		var i Inquiry
		if err := rows.Scan(
			&i.ID,
			&i.Topic,
			&i.Email,
			&i.Name,
			&i.OrderNumber,
			&i.Subject,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectInquiry = `-- name: SelectInquiry :one
;

SELECT id, topic, email, name, order_number, subject, content, created_at FROM inquiries
WHERE id = ?
LIMIT 1
`

func (q *Queries) SelectInquiry(ctx context.Context, id int64) (Inquiry, error) {
	row := q.db.QueryRowContext(ctx, selectInquiry, id)
	var i Inquiry
	err := row.Scan(
		&i.ID,
		&i.Topic,
		&i.Email,
		&i.Name,
		&i.OrderNumber,
		&i.Subject,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}
