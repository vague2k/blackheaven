package modules

import "github.com/vague2k/blackheaven/views/components/separator"
import "github.com/vague2k/blackheaven/views/components/table"
import "github.com/vague2k/blackheaven/views/components/badge"
import "github.com/vague2k/blackheaven/internal/database"
import "github.com/vague2k/blackheaven/views/components/dropdown"
import "github.com/vague2k/blackheaven/views/components/button"
import "github.com/vague2k/blackheaven/views/components/icon"
import "fmt"
import "github.com/vague2k/blackheaven/utils"
import "github.com/vague2k/blackheaven/views/components/drawer"
import "github.com/vague2k/blackheaven/views/components/checkbox"

type ManagerTableProps struct {
	Title       string
	Description string
	Inquiries   []database.Inquiry
}

templ ManagerTable(props ...ManagerTableProps) {
	{{ var p ManagerTableProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div class="flex flex-col w-3/4 p-4 rounded-md">
		<div class="flex flex-col pb-2">
			<span class="font-medium text-xl">{ p.Title }</span>
			<span class="text-sm">{ fmt.Sprintf("%d Inquiries", len(p.Inquiries)) }</span>
		</div>
		@separator.Separator()
		@table.Table() {
			@table.Header() {
				@table.Row() {
					@table.Head() {
						@checkbox.Checkbox()
					}
					@table.Head() {
						Topic
					}
					@table.Head() {
						Email
					}
					@table.Head() {
						Name
					}
					@table.Head() {
						Order
					}
					@table.Head() {
						Subject
					}
					@table.Head() {
						Content
					}
				}
			}
			@table.Body() {
				for _, inq := range p.Inquiries {
					// TODO: use alpine for opening elements from a row
					@table.Row() {
						@table.Cell() {
							@checkbox.Checkbox()
						}
						@table.Cell() {
							@badge.Badge(badge.Props{
								Class: topicVariants(inq.Topic),
							}) {
								{ utils.Capitalize(inq.Topic) }
							}
						}
						@table.Cell() {
							{ inq.Email }
						}
						@table.Cell() {
							{ inq.Name }
						}
						@table.Cell() {
							{ inq.OrderNumber }
						}
						@table.Cell() {
							{ inq.Subject }
						}
						@table.Cell(table.CellProps{
							Class: "truncate max-w-56",
						}) {
							{ inq.Content }
						}
						@table.Cell() {
							@actionDropdown(inq)
						}
					}
				}
			}
		}
	</div>
}

templ actionDropdown(inquiry database.Inquiry) {
	@dropdown.Dropdown() {
		@dropdown.Trigger() {
			@button.Button(button.Props{
				Class:   "h-7 text-xs",
				Variant: button.VariantGhost,
			}) {
				@icon.Ellipsis(icon.Props{
					Size: 16,
				})
			}
		}
		@dropdown.Content(dropdown.ContentProps{
			Class: "w-fit",
		}) {
			@dropdown.Label() {
				Actions
			}
			@dropdown.Separator()
			@dropdown.Group() {
				@dropdown.Item(dropdown.ItemProps{
					PreventClose: true,
				}) {
					@editInquiryDrawer()
				}
				@dropdown.Item(dropdown.ItemProps{
					Class: "w-full cursor-pointer",
				}) {
					<span class="flex items-center">
						@icon.Reply(icon.Props{Size: 16, Class: "mr-2"})
						Reply with email
					</span>
				}
				if inquiry.OrderNumber != "" {
					@dropdown.Item(dropdown.ItemProps{
						Class: "w-full cursor-pointer",
					}) {
						<span class="flex items-center">
							@icon.Box(icon.Props{Size: 16, Class: "mr-2"})
							View Order <span class="ml-1.5 text-blue-500">{ inquiry.OrderNumber }</span>
						</span>
					}
				}
				@dropdown.Item(dropdown.ItemProps{
					PreventClose: true,
				}) {
					@viewInquiryContentDrawer(inquiry)
				}
			}
		}
	}
}

templ editInquiryDrawer() {
	@drawer.Drawer(drawer.Props{
		Class: "w-full",
	}) {
		@drawer.Trigger(drawer.TriggerProps{
			Class: "w-full",
		}) {
			<span class="w-full flex items-center">
				@icon.Pencil(icon.Props{Size: 16, Class: "mr-2"})
				Edit
			</span>
		}
		@drawer.Content(drawer.ContentProps{
			Position: drawer.PositionLeft,
		}) {
			@drawer.Header() {
				@drawer.Title() {
					Edit inquiry
				}
				@drawer.Description() {
					Make changes to this inquiry here. Click save when you are done.
				}
			}
		}
	}
}

templ viewInquiryContentDrawer(inquiry database.Inquiry) {
	@drawer.Drawer(drawer.Props{
		Class: "w-full",
	}) {
		@drawer.Trigger(drawer.TriggerProps{
			Class: "w-full",
		}) {
			<span class="w-full flex items-center">
				@icon.MessageCircle(icon.Props{Size: 16, Class: "mr-2"})
				View Content
			</span>
		}
		@drawer.Content(drawer.ContentProps{
			Position: drawer.PositionLeft,
		}) {
			<div class="h-full flex flex-col justify-between">
				<div>
					@drawer.Header() {
						<div class="flex justify-between items-center">
							@drawer.Title() {
								Inquiry Content
							}
							@drawerButton(DrawerButtonProps{
								Variant: VariantGhost,
								Class:   "px-2.5 py-2",
								Attributes: templ.Attributes{
									"data-drawer-close": "",
								},
							}) {
								<span class="flex justify-center items-center">
									@icon.X(icon.Props{Size: 16})
								</span>
							}
						</div>
						@drawer.Description() {
							Let's see what { inquiry.Name } had to say...
						}
					}
					<p class="mb-5">{ inquiry.Content }</p>
				</div>
				<div class="flex flex-col justify-end gap-y-1">
					@drawerButton(DrawerButtonProps{
						Class: "w-full",
					}) {
						<span class="flex justify-center items-center">
							@icon.Reply(icon.Props{Size: 16, Class: "mr-2"})
							Reply with email
						</span>
					}
					@drawerButton(DrawerButtonProps{
						Class:   "w-full",
						Variant: VariantSecondary,
						Attributes: templ.Attributes{
							"data-drawer-close": "",
						},
					}) {
						<span class="flex justify-center items-center">
							@icon.X(icon.Props{Size: 16, Class: "mr-2"})
							Close
						</span>
					}
				</div>
			</div>
		}
	}
}

func topicVariants(s string) string {
	switch s {
	case "order":
		return "rounded-sm bg-purple-500 text-white"
	case "submission":
		return "rounded-sm bg-blue-500 text-white"
	default:
		return "rounded-sm bg-muted text-foreground"
	}
}
