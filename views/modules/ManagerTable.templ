package modules

import "github.com/vague2k/blackheaven/views/components/separator"
import "github.com/vague2k/blackheaven/views/components/table"
import "github.com/vague2k/blackheaven/views/components/badge"
import "github.com/vague2k/blackheaven/internal/database"
import "github.com/vague2k/blackheaven/views/components/dropdown"
import "github.com/vague2k/blackheaven/views/components/button"
import "github.com/vague2k/blackheaven/views/components/icon"
import "fmt"
import "github.com/vague2k/blackheaven/utils"
import "github.com/vague2k/blackheaven/views/components/drawer"
import "github.com/vague2k/blackheaven/views/components/checkbox"
import "github.com/vague2k/blackheaven/views/modules/form"

type ManagerTableProps struct {
	Title       string
	Description string
	Inquiries   []database.Inquiry
}

templ ManagerTable(props ...ManagerTableProps) {
	{{ var p ManagerTableProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div class="flex flex-col w-3/4 p-4 rounded-md">
		<div class="flex flex-col pb-2">
			<span class="font-medium text-xl">{ p.Title }</span>
			<span class="text-sm">{ fmt.Sprintf("%d Inquiries", len(p.Inquiries)) }</span>
		</div>
		@separator.Separator()
		@table.Table() {
			@table.Header() {
				@table.Row() {
					@table.Head() {
						@checkbox.Checkbox()
					}
					@table.Head() {
						Topic
					}
					@table.Head() {
						Email
					}
					@table.Head() {
						Name
					}
					@table.Head() {
						Order
					}
					@table.Head() {
						Subject
					}
					@table.Head() {
						Content
					}
				}
			}
			@table.Body() {
				for _, inq := range p.Inquiries {
					// TODO: use alpine for opening elements from a row
					@table.Row() {
						@table.Cell() {
							@checkbox.Checkbox()
						}
						@table.Cell() {
							@badge.Badge(badge.Props{
								Class: topicVariants(inq.Topic),
							}) {
								{ utils.Capitalize(inq.Topic) }
							}
						}
						@table.Cell() {
							{ inq.Email }
						}
						@table.Cell() {
							{ inq.Name }
						}
						@table.Cell() {
							{ inq.OrderNumber }
						}
						@table.Cell() {
							{ inq.Subject }
						}
						@table.Cell(table.CellProps{
							Class: "truncate max-w-56",
						}) {
							{ inq.Content }
						}
						@table.Cell() {
							@actionDropdown(inq)
						}
					}
					@editInquiryDrawerContent(inq)
					@viewInquiryContentDrawerContent(inq)
				}
			}
		}
	</div>
}

templ actionDropdown(inquiry database.Inquiry) {
	@dropdown.Dropdown() {
		@dropdown.Trigger() {
			@button.Button(button.Props{
				Class:   "h-7 text-xs",
				Variant: button.VariantGhost,
			}) {
				@icon.Ellipsis(icon.Props{
					Size: 16,
				})
			}
		}
		@dropdown.Content(dropdown.ContentProps{
			Class: "w-fit",
		}) {
			@dropdown.Label() {
				Actions
			}
			@dropdown.Separator()
			@dropdown.Group() {
				@dropdown.Item() {
					@editInquiryDrawerTrigger(inquiry)
				}
				@dropdown.Item() {
					@viewInquiryContentDrawerTrigger(inquiry)
				}
				if inquiry.OrderNumber != "" {
					@dropdown.Item(dropdown.ItemProps{
						Class: "w-full cursor-pointer",
					}) {
						<span class="flex items-center">
							@icon.Box(icon.Props{Size: 16, Class: "mr-2"})
							View Order <span class="ml-1.5 text-blue-500">{ inquiry.OrderNumber }</span>
						</span>
					}
				}
				@dropdown.Item(dropdown.ItemProps{
					Class: "w-full cursor-pointer",
				}) {
					<span class="flex items-center">
						@icon.Reply(icon.Props{Size: 16, Class: "mr-2"})
						Reply with email
					</span>
				}
			}
		}
	}
}

templ editInquiryDrawerTrigger(inquiry database.Inquiry) {
	{{ ID := fmt.Sprintf("edit-inquiry-drawer-%d", inquiry.ID) }}
	@drawer.Trigger(drawer.TriggerProps{
		Class: "w-full",
		For:   ID,
	}) {
		<span class="w-full flex items-center">
			@icon.Pencil(icon.Props{Size: 16, Class: "mr-2"})
			Edit
		</span>
	}
}

templ editInquiryDrawerContent(inquiry database.Inquiry) {
	{{ ID := fmt.Sprintf("edit-inquiry-drawer-%d", inquiry.ID) }}
	@drawer.Content(drawer.ContentProps{
		ID:       ID,
		Position: drawer.PositionLeft,
	}) {
		<div class="h-full flex flex-col justify-between">
			<div>
				@drawer.Header() {
					@drawer.Title() {
						Edit inquiry
					}
					@drawer.Description() {
						Make changes to this inquiry here. Click save when you are done.
					}
				}
				<form class="flex flex-col gap-y-4">
					{{ const FormID = "manager-row" }}
					<div class="flex gap-x-3">
						@form.Selectbox(form.SelectboxProps{
							FormID:      FormID,
							Name:        "topic",
							Class:       "w-1/2",
							Label:       "Inquiry Topic",
							Value:       inquiry.Topic,
							Placeholder: "Select a topic",
							Options:     []string{"general", "order", "submission"},
						})
						@form.Input(form.InputProps{
							FormID:      FormID,
							Name:        "email",
							Class:       "w-1/2",
							Label:       "Email",
							Value:       inquiry.Email,
							Placeholder: "johnsmith@email.com",
						})
					</div>
					<div class="flex gap-x-3">
						@form.Input(form.InputProps{
							FormID:      FormID,
							Name:        "name",
							Class:       "w-1/2",
							Label:       "Name",
							Value:       inquiry.Name,
							Type:        "text",
							Placeholder: "John Smith",
						})
						@form.Input(form.InputProps{
							FormID:      FormID,
							Name:        "order",
							Label:       "Order #",
							Class:       "w-1/2",
							Value:       inquiry.OrderNumber,
							Type:        "text",
							Placeholder: "Order # here",
						})
					</div>
					@form.Input(form.InputProps{
						FormID:      FormID,
						Name:        "subject",
						Label:       "Subject",
						Type:        "text",
						Placeholder: "Summarize your message",
					})
					@form.Textarea(form.TextareaProps{
						FormID:      FormID,
						Name:        "content",
						Label:       "Message",
						Rows:        7,
						Value:       inquiry.Content,
						Placeholder: "What do you have to say...",
					})
				</form>
			</div>
			<div class="mt-4 flex flex-col justify-end gap-y-1">
				@button.Button() {
					<span class="flex justify-center items-center">
						@icon.Save(icon.Props{Size: 16, Class: "mr-2"})
						Save changes
					</span>
				}
				@drawer.Close() {
					<span class="flex justify-center items-center">
						@icon.X(icon.Props{Size: 16, Class: "mr-2"})
						Close
					</span>
				}
			</div>
		</div>
	}
}

templ viewInquiryContentDrawerTrigger(inquiry database.Inquiry) {
	{{ ID := fmt.Sprintf("inquiry-content-drawer-%d", inquiry.ID) }}
	@drawer.Trigger(drawer.TriggerProps{
		Class: "w-full",
		For:   ID,
	}) {
		<span class="w-full flex items-center">
			@icon.MessageCircle(icon.Props{Size: 16, Class: "mr-2"})
			View Content
		</span>
	}
}

templ viewInquiryContentDrawerContent(inquiry database.Inquiry) {
	{{ ID := fmt.Sprintf("inquiry-content-drawer-%d", inquiry.ID) }}
	@drawer.Content(drawer.ContentProps{
		Position: drawer.PositionLeft,
		ID:       ID,
	}) {
		<div class="h-full flex flex-col justify-between">
			<div>
				@drawer.Header() {
					<div class="flex justify-between items-center">
						@drawer.Title() {
							Inquiry Content
						}
						@drawerButton(DrawerButtonProps{
							Variant: VariantGhost,
							Class:   "px-2.5 py-2",
							Attributes: templ.Attributes{
								"data-drawer-close": "",
							},
						}) {
							<span class="flex justify-center items-center">
								@icon.X(icon.Props{Size: 16})
							</span>
						}
					</div>
					@drawer.Description() {
						Let's see what { inquiry.Name } had to say...
					}
				}
				<p class="mb-5">{ inquiry.Content }</p>
			</div>
			<div class="flex flex-col justify-end gap-y-1">
				@button.Button() {
					<span class="flex justify-center items-center">
						@icon.Reply(icon.Props{Size: 16, Class: "mr-2"})
						Reply with email
					</span>
				}
				@drawer.Close(drawer.CloseProps{
					For: ID,
				}) {
					<span class="flex justify-center items-center">
						@icon.X(icon.Props{Size: 16, Class: "mr-2"})
						Close
					</span>
				}
			</div>
		</div>
	}
}

func topicVariants(s string) string {
	switch s {
	case "order":
		return "rounded-sm bg-purple-500 text-white"
	case "submission":
		return "rounded-sm bg-blue-500 text-white"
	default:
		return "rounded-sm bg-muted text-foreground"
	}
}
