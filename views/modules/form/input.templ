package form

import "github.com/vague2k/blackheaven/views/components/input"
import "github.com/vague2k/blackheaven/views/components/form"
import "fmt"
import "github.com/vague2k/blackheaven/utils"
import "github.com/vague2k/blackheaven/views/components/icon"

type InputProps struct {
	FormID      string
	Name        string
	Description string
	Label       string
	Class       string
	HasError    bool
	HasNoError  bool
	Required    bool
	Value       string
	Disabled    bool
	FileAccept  string
	Type        input.Type
	Placeholder string
	Attributes  templ.Attributes
}

templ Input(props ...InputProps) {
	{{ var p InputProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	@form.Item(form.ItemProps{
		ID:         fmt.Sprintf("%s-%s-element-container", p.FormID, p.Name),
		Class:      p.Class,
		Attributes: p.Attributes,
	}) {
		@form.Label(form.LabelProps{
			ID:  utils.ID(p.FormID, p.Name, "input", "label"),
			For: p.FormID,
		}) {
			<p class="flex">
				<span>{ p.Label }</span>
				if p.Required {
					<span class="flex ml-1 text-destructive text-xl">
						@icon.Circle(icon.Props{
							Size: 6,
							Fill: "red",
						})
					</span>
				}
			</p>
		}
		@input.Input(input.Props{
			ID:          utils.ID(p.FormID, p.Name, "input", "self"),
			Name:        p.Name,
			Placeholder: p.Placeholder,
			Value:       p.Value,
			Disabled:    p.Disabled,
			Required:    p.Required,
			FileAccept:  p.FileAccept,
			HasError:    p.HasError,
		})
		@form.Description(form.DescriptionProps{
			ID: utils.ID(p.FormID, p.Name, "input", "desc"),
			Class: utils.TwMerge(
				"text-xs mt-2",
				utils.If(p.HasError, "text-destructive"),
				utils.If(p.HasNoError, "text-success")),
		}) {
			{ p.Description }
		}
	}
}
