package modules

import "github.com/vague2k/blackheaven/views/components/form"
import "fmt"
import "github.com/vague2k/blackheaven/views/components/selectbox"
import "github.com/vague2k/blackheaven/utils"
import "github.com/vague2k/blackheaven/views/components/icon"

type FormSelectBoxProps struct {
	FormID                string
	Name                  string
	Description           string
	Label                 string
	Placeholder           string
	Class                 string
	HasError              bool
	Required              bool
	Search                bool
	SelectBoxTriggerProps selectbox.TriggerProps
	Attributes            templ.Attributes
	Options               []string
}

templ FormSelectBox(props ...FormSelectBoxProps) {
	{{ var p FormSelectBoxProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	@form.Item(form.ItemProps{
		ID:         fmt.Sprintf("%s-%s-element-container", p.FormID, p.Name),
		Class:      p.Class,
		Attributes: p.Attributes,
	}) {
		@form.Label(form.LabelProps{
			ID:  utils.ID(p.FormID, p.Name, "selectbox", "label"),
			For: p.FormID,
		}) {
			<p class="flex">
				<span>{ p.Label }</span>
				if p.Required {
					<span class="flex ml-1 text-destructive text-xl">
						@icon.Circle(icon.Props{
							Size: 6,
							Fill: "red",
						})
					</span>
				}
			</p>
		}
		@selectbox.SelectBox(selectbox.Props{
			ID: utils.ID(p.FormID, p.Name, "selectbox", "self"),
		}) {
			@selectbox.Trigger(selectbox.TriggerProps{
				ID:   utils.ID(p.FormID, p.Name, "selectbox", "trigger"),
				Name: p.Name,
				Class: utils.TwMerge(
					"focus:outline focus:outline-ring focus:outline-offset-1",
					utils.If(p.HasError, "border-destructive focus:outline-destructive"),
				),
				Required:   p.Required,
				Attributes: p.SelectBoxTriggerProps.Attributes,
			}) {
				@selectbox.Value(selectbox.ValueProps{
					Placeholder: p.Placeholder,
				})
			}
			@selectbox.Content(selectbox.ContentProps{
				ID:       utils.ID(p.FormID, p.Name, "selectbox", "content"),
				NoSearch: !p.Search,
			}) {
				@selectbox.Group(selectbox.GroupProps{
					ID: utils.ID(p.FormID, p.Name, "selectbox", "group"),
				}) {
					for _, value := range p.Options {
						@selectbox.Item(selectbox.ItemProps{
							Value: value,
						}) {
							{ utils.Capitalize(value) }
						}
					}
				}
			}
		}
		@form.Description(form.DescriptionProps{
			ID: utils.ID(p.FormID, p.Name, "selectbox", "desc"),
			Class: utils.TwMerge(
				"text-xs mt-2",
				utils.If(p.HasError, "text-destructive"),
			),
		}) {
			{ p.Description }
		}
	}
}
